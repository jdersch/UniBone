       1                                	.title Multi Arbitration DMA/INTR test
       2                                
       3                                	; *************************************************
       4                                	; Exercises several devices in parallel,
       5                                	; each with INTR and DMA
       6                                	; For a device XX we have
       7                                	; XXENAB - flag to enable device
       8                                	; XXBASE - base address of device
       9                                	; XXVEC - the INTR vector
      10                                	; XXISR - Interrupt Service
      11                                	; XXIFLG - flag which is incremented in ISR
      12                                	; XXBUF - data buffer for DMA transfer
      13                                	; XXINIT - Initialize device after RESET
      14                                	; XXGO - subroutine to initiate DMA and INTR
      15                                	; XXECNT - event counter, indicates activity
      16                                	; XXLABL - single char label to print activity
      17                                	;
      18                                	; Devices are
      19                                	; CO - serial console
      20                                	; RK - RK11/RK05 disk
      21                                	; RL - RL11/RL02 disk
      22                                	; RY - Serial RX211 Floppy,
      23                                	; DU - MSCP disk drive on UDA controller
      24                                
      25                                	; enable tests
      26 000001                         kwenab	=	1
      27 000001                         rkenab	=	1
      28 000001                         rlenab	=	1
      29 000000                         ryenab	=	0	; not yet tested
      30 000000                         duenab	=	0	; not yet implemeneted
      31                                
      32                                	.enable AMA
      33                                	.asect
      34                                
      35                                	; *************************************************
      36                                	; Vectors		; UniBone emulated CPU start
      37 000000                         	. = 0
      38 000000 000137  001000          	jmp	@#start
      39                                
      40                                
      41                                	; Emulated CPU: restart on pwoer event
      42 000024                         	. = 24			; Power ON/OFF
      43 000024 001000                  	.word	start		; PC
      44 000026 000340                  	.word	340		; PSW priority level 7
      45                                
      46 000060                         	. = corvec
      47 000060 001264                  	.word	corisr		; RCV interrupt
      48 000062 000340                  	.word	340
      49 000064                         	. = coxvec
      50 000064 001300                  	.word	coxisr		; XMT interrupt
      51 000066 000340                  	.word	340
      52                                
      53 000001                         .if ne kwenab
      54 000100                         	. = kwvect
      55 000100 001524                  	.word	kwisr		; periodic interrupt
      56 000102 000340                  	.word	340
      57                                .endc
      58                                
      59 000001                         .if ne rlenab
      60 000160                         	. = rlvect		; RL11
      61 000160 004640                  	.word	rlisr
      62 000162 000340                  	.word	340
      63                                .endc
      64                                
      65 000001                         .if ne rkenab
      66 000220                         	. = rkvect		; RK11
      67 000220 002562                  	.word	rkisr
      68 000222 000340                  	.word	340
      69                                .endc
      70                                
      71 000000                         .if ne ryenab
      72                                	. = ryvect		; RX211
      73                                	.word	ryisr
      74                                	.word	340
      75                                .endc
      76                                
      77 000000                         .if ne duenab
      78                                	. = duvect		; UDA MSCP controller
      79                                	.word	duisr
      80                                	.word	340
      81                                .endc
      82                                
      83 177776                         psw	= 177776
      84 165020                         monitr	= 165020		; Monitor addr for back jump
      85                                
      86                                	; *************************************************
      87                                	; Main
      88 001000                         	. = 1000
      89 000776                         stack	= .-2
      90                                start:
      91 001000 012706  000776          	mov	#stack,sp
      92 001004 005037  177776          	clr	@#psw		; priorty level 0, allow INTR
      93                                	; Initialize devices
      94 001010 000005                  	reset
      95 001012 004737  001306          	call	corini
      96 001016 004737  001322          	call	coxini
      97 000001                         .if ne kwenab
      98 001022 004737  001536          	call	kwinit
      99                                .endc
     100 000001                         .if ne rkenab
     101 001026 004737  002570          	call	rkinit
     102                                .endc
     103 000001                         .if ne rlenab
     104 001032 004737  004646          	call	rlinit
     105                                .endc
     106 000000                         .if ne ryenab
     107                                	call	ryinit
     108                                .endc
     109 000000                         .if ne duenab
     110                                	call	duinit
     111                                .endc
     112                                
     113 001036 012701  004766          	mov	#shello,r1	; Print "Hello" message
     114 001042 004737  001336          	call	puts
     115                                
     116                                	; main loop: check interrupt flags, restart DMA
     117                                	; process serial input
     118                                loop:
     119 001046 004737  001060          	call	dokbd		; check keyboard input
     120 001052 004737  001120          	call	dodev		; check device activities
     121 001056 000773                  	br	loop
     122                                
     123                                
     124                                
     125                                	; --- check keyboard input
     126                                dokbd:
     127 001060 004737  001470          	call	getc
     128 001064 103014                  	bcc	9$		; nothing received
     129                                	; process char in r0
     130 001066 120027  000003          	cmpb	r0,#3
     131 001072 001007                  	bne	1$
     132 001074 012701  005057          	mov	#sbye,r1	; ^C: print "Bye", back to monitor
     133 001100 004737  001336          	call	puts
     134 001104 000005                  	reset			; stop devices
     135 001106 000137  165020          	jmp	monitr
     136                                1$:
     137                                	; echo chars without special meaning
     138 001112 004737  001450          	call	putc
     139                                9$:
     140 001116 000207                  	return
     141                                
     142                                	; -- check device activities
     143                                dodev:
     144                                	; For all devices: restart device DMA if Interrupt received
     145 000001                         .if ne kwenab
     146 001120 005737  001520          	tst	kwiflg
     147 001124 001412                  	beq	1$
     148 001126 005037  001520          	clr	kwiflg
     149 001132 004737  001552          	call	kwgo
     150 001136 012700  000127          	mov	#kwlabl,r0	; progress printout
     151 001142 012701  001522          	mov	#kwecnt,r1
     152 001146 004737  001240          	call	progrs
     153                                1$:
     154                                .endc
     155                                
     156 000001                         .if ne rkenab
     157 001152 005737  001554          	tst	rkiflg
     158 001156 001412                  	beq	2$
     159 001160 005037  001554          	clr	rkiflg
     160 001164 004737  002576          	call	rkgo
     161 001170 012700  000113          	mov	#rklabl,r0	; progress printout
     162 001174 012701  002560          	mov	#rkecnt,r1
     163 001200 004737  001240          	call	progrs
     164                                2$:
     165                                .endc
     166 000001                         .if ne rlenab
     167 001204 005737  002632          	tst	rliflg
     168 001210 001412                  	beq	3$
     169 001212 005037  002632          	clr	rliflg
     170 001216 004737  004654          	call	rlgo
     171 001222 012700  000114          	mov	#rllabl,r0	; progress printout
     172 001226 012701  004636          	mov	#rlecnt,r1
     173 001232 004737  001240          	call	progrs
     174                                3$:
     175                                .endc
     176 000000                         .if ne ryenab
     177                                	tst	ryiflg
     178                                	beq	4$
     179                                	clr	ryiflg
     180                                	call	rygo
     181                                	mov	#rylabl,r0	; progress printout
     182                                	mov	#ryecnt,r1
     183                                	call	progrs
     184                                4$:
     185                                .endc
     186 000000                         .if ne duenab
     187                                	tst	duiflg
     188                                	beq	5$
     189                                	clr	duiflg
     190                                	call	dugo
     191                                	mov	#dulabl,r0	; progress printout
     192                                	mov	#duecnt,r1
     193                                	call	progrs
     194                                5$:
     195                                .endc
     196                                
     197 001236 000207                  	return
     198                                
     199                                
     200                                	; progress
     201                                	; check if the counter with address in r1 is at
     202                                	; 1024. if yes, print the char in r0
     203                                progrs:
     204                                ;	 bic	 #777700,(r1)	 ; mask counter to 0..63
     205 001240 042711  177400          	bic	#777400,(r1)	; mask counter to 0..255
     206                                ;	 bic	 #776000,(r1)	 ; mask counter to 0..1023
     207 001244 001002                  	bne	9$
     208 001246 004737  001450          	call	putc		; is at 0: print label character
     209                                9$:
     210 001252 000207                  	return
     211                                
     212                                
     213                                
     214                                	.include ma_cons.mac
       1                                
       2                                	.title ma_cons - Serial Console I/O
       3 000060                         corvec= 060		; vector for Receiver
       4 000064                         coxvec= 064		; vector for Xmitter
       5                                
       6 177560                         corbas= 777560		; base addr of Receiver
       7 177564                         coxbas= 777564		; base addr of Xmitter
       8                                
       9                                
      10                                
      11                                	; -- ISRs, increment Interrupt FLags
      12                                
      13 001254 000001                  corifl:	.word	1	; Interrupt flags
      14 001256 000001                  coxifl:	.word	1
      15                                
      16 001260                         corbuf:	.blkw	1  	; data buffer
      17 001262                         coxbuf: .blkw 	1
      18                                
      19                                corisr:
      20 001264 013737  177562  001260  	mov	@#corbas+2,corbuf	; read char, clear INTR
      21 001272 005237  001254          	inc	corifl
      22 001276 000002                  	rti
      23                                
      24                                coxisr:
      25 001300 005237  001256          	inc	coxifl
      26 001304 000002                  	rti
      27                                
      28                                	; -- Initialize device after RESET
      29                                corini:
      30 001306 012737  000100  177560  	mov	#100,@#corbas	; Bit 6 = Receiver Interrupt Enable
      31 001314 005037  001254          	clr	corifl
      32 001320 000207                  	return
      33                                coxini:
      34 001322 012737  000100  177564  	mov	#100,@#coxbas	; Bit 6 = Transmitter Interrupt Enable
      35 001330 005037  001256          	clr	coxifl
      36 001334 000207                  	return
      37                                
      38                                
      39                                
      40                                	; -------- Console I/O --------
      41                                
      42                                	; puts - print a string
      43                                	; r1 = pointer, r0,r1 changed
      44                                puts:
      45 001336 112100                  	movb	(r1)+,r0	; load xmt char
      46 001340 001403                  	beq	1$		; string ends with 0
      47 001342 004737  001450          	call	@#putc
      48 001346 000773                  	br	puts		; transmit nxt char of string
      49 001350 000207                  1$:	return
      50                                
      51                                
      52                                	; putnum - print the octal number in r0
      53 001352                         numbf0:  .blkw	 10		 ; space to mount number string
      54 001372                         numbf1	=.
      55                                putnum:
      56 001372 010346                  	mov	r3,-(sp)
      57 001374 010002                  	mov	r0,r2		; r2 = shifter
      58 001376 012701  001372          	mov	#numbf1,r1	; r1 = buffer pointer, backwards
      59 001402 112741  000000          	movb	#0,-(r1)	; set terminating 0
      60                                	; repeat 6 times
      61 001406 012703  000006          	mov	#6,r3
      62                                1$:
      63 001412 010200                  	mov	r2,r0
      64                                	; extract lower 3 bits = octal digit
      65 001414 042700  177770          	bic	#177770,r0 ; r0 &= 0x07
      66 001420 062700  000060          	add	#60,r0	; r0 += '0'
      67 001424 110041                  	movb	r0,-(r1) ; write in buffer
      68 001426 000241                  	clc
      69 001430 006202                  	asr	r2	; shift to next digit
      70 001432 006202                  	asr	r2
      71 001434 006202                  	asr	r2
      72 001436 077313                  	sob	r3,1$	; loop for all 6 digits
      73                                
      74 001440 004737  001336          	call	@#puts
      75 001444 012603                  	mov	(sp)+,r3
      76 001446 000207                  	return
      77                                
      78                                
      79                                	; putc - output a single char
      80                                	; r0 = char
      81                                putc:
      82 001450 005037  001256          	clr	coxifl		; reset interrupt flag
      83 001454 010037  177566          	mov	r0,@#coxbas+2	; char into transmit buffer
      84 001460 005737  001256          1$:	tst	coxifl		; XMT RDY?
      85 001464 001775                  	beq	1$		; no, loop
      86                                	; UART is buffering: char only started to sent now
      87                                	; interrupt active until next putc
      88 001466 000207                  	return
      89                                
      90                                	; getc - poll and input a single char
      91                                	; result in r0
      92                                	; carry clear : nothing received
      93                                	; carry set: char received
      94                                getc:
      95 001470 005000                  	clr	r0
      96 001472 005737  001254          	tst	corifl
      97 001476 001002                  	bne	1$
      98 001500 000241                  	clc			; Carry clear, no Interrupt, nothing received
      99 001502 000207                  	return
     100                                1$:
     101 001504 013700  001260          	mov	corbuf,r0 	; Interrupt, return char
     102 001510 005037  001254          	clr	corifl		; reset interrupt flag
     103 001514 000261                  	sec			; Carry Set
     104 001516 000207                  	return
     104                                
     215 000001                         .if ne kwenab
     216                                	.include ma_kw.mac
       1                                	.title ma_kw - KW11 test driver
       2                                
       3                                	; KW11 raises INTR at 50 Hz
       4                                
       5 000100                         kwvect = 100		; vector of KW11 line clock
       6 177546                         kwbase = 777546		; base addr of KW11 register
       7 000127                         kwlabl = 'W		; label char
       8                                
       9                                
      10                                	; --- ISRs, increment Interrupt FLags
      11 001520 000001                  kwiflg:	.word	1	; Interrupt flags
      12                                
      13 001522 000001                  kwecnt:	.word	1	; event counter
      14                                
      15                                kwisr:
      16 001524 005237  001522          	inc	kwecnt			; register as event
      17 001530 005237  001520          	inc	kwiflg	; set ISR flag
      18 001534 000002                  	rti
      19                                
      20                                	; --- Initialize device after RESET
      21                                kwinit:
      22 001536 012737  000100  177546  	mov	#100,@#kwbase		; set  interrupt enable
      23 001544 005037  001522          	clr	kwecnt
      24 001550 000207                  	return
      25                                
      26                                	; --- Restart new INTR
      27                                kwgo:
      28                                	; nothing todo, INTR repeated automatically
      29                                	; bic	#200,@#kwbase		; clear INTERRUPT MONITOR bit
      30 001552 000207                  	return
      31                                
      31                                
     217                                .endc
     218 000001                         .if ne rkenab
     219                                	.include ma_rk.mac
       1                                
       2                                	.title ma_rk - RK11/RK05 test driver
       3                                	; RK11 DMA is generated by reading cylinder 0, head 0, sector 0
       4                                
       5 000220                         rkvect = 220		; vector of RK11 controller
       6 177400                         rkbase = 777400		; base addr of RK11 controller
       7 000113                         rklabl = 'K		; label char
       8                                
       9                                	; --- ISRs, increment Interrupt FLags
      10 001554 000001                  rkiflg:	.word	1	; Interrupt flags
      11                                
      12 001556                         rkbuff:	.blkw	400+1	; data buffer: 1 sector = 256 words
      13                                
      14 002560 000001                  rkecnt:	.word	1	; event counter
      15                                
      16                                rkisr:
      17 002562 005237  001554          	inc	rkiflg	; set ISR flag
      18 002566 000002                  	rti
      19                                
      20                                	; --- Initialize device after RESET
      21                                rkinit:
      22 002570 005037  002560          	clr	rkecnt
      23 002574 000207                  	return
      24                                
      25                                	; --- Restart new DMA transmission
      26                                rkgo:
      27                                	; read first sector into rkbuff
      28 002576 005037  177412          	clr	@#rkbase+12		; DA disk address = 0: unit 0, cyl/hd/sec=0
      29 002602 012737  001556  177410  	mov	#rkbuff,@#rkbase+10 	; BA bus address of DMA
      30 002610 012737  177400  177406  	mov	#-400,@#rkbase+6 	; WC word count = 256 words
      31 002616 012737  000105  177404  	mov	#100+4+1,@#rkbase+4	; Command INT ENABLE + "READ" + GO
      32 002624 005237  002560          	inc	rkecnt 			; register as event
      33 002630 000207                  	return
      34                                
      34                                
     220                                .endc
     221 000001                         .if ne rlenab
     222                                	.include ma_rl.mac
       1                                	.title ma_rl - RL11/RL01/2 test driver
       2                                
       3                                	; RL11 DMA is generated by reading cylinder 0, head0, sector 0
       4                                
       5 000160                         rlvect = 160		; vector of RL11 controller
       6 174400                         rlbase = 774400		; base addr of RL11 controller
       7 000114                         rllabl = 'L		; label char
       8                                
       9                                
      10                                	; --- ISRs, increment Interrupt FLags
      11 002632 000001                  rliflg:	.word	1	; Interrupt flags
      12                                
      13 002634                         rlbuff:	.blkw	2*400+1	; data buffer: 2 sector = 256 words
      14                                
      15 004636 000001                  rlecnt:	.word	1	; event counter
      16                                
      17                                rlisr:
      18 004640 005237  002632          	inc	rliflg	; set ISR flag
      19 004644 000002                  	rti
      20                                
      21                                	; --- Initialize device after RESET
      22                                rlinit:
      23 004646 005037  004636          	clr	rlecnt
      24 004652 000207                  	return
      25                                
      26                                	; --- Restart new DMA transmission
      27                                rlgo:
      28 004654 012701  174400          	mov	#rlbase,r1		; r1 = controller base address
      29                                
      30                                	; sequence from boot loader 23-751A9, lot of testing
      31                                	; 1. get status
      32 004660 012761  000013  000004  	mov	#013,4(r1)		; DA subcmd reset+getstatus
      33 004666 012711  000004          	mov	#4,(r1)			; CSR do "GET STATUS"
      34 004672 105711                  1$:	tstb	(r1)			; test for ready
      35 004674 100376                  	bpl	1$			; wait
      36                                	; 2. read current track
      37 004676 012711  000010          	mov	#10,(r1)		; CSR read header cmd
      38 004702 105711                  2$:	tstb	(r1)			; test for ready
      39 004704 100376                  	bpl	2$			; wait
      40                                	; 3. seek
      41 004706 016102  000006          	mov	6(r1),r2		; MP retrieve cyl/head/sector
      42 004712 042702  000077          	bic	#77,r2			; set sector to zero
      43 004716 005202                  	inc	r2			; set seek flag, head 0, seek to cyl 0
      44 004720 010261  000004          	mov	r2,4(r1)		; DA for seek
      45 004724 012711  000006          	mov	#6,(r1)			; CSR seek cmd
      46 004730 105711                  3$:	tstb	(r1)			; test for ready
      47 004732 100376                  	bpl	3$			; wait
      48                                	; 4. read sector 0+1 and interrupt
      49 004734 012761  002634  000002  	mov	#rlbuff,2(r1)		; BA bus address of DMA
      50 004742 005061  000004          	clr	4(r1)			; DA select cyl0/head0/sector0
      51 004746 012761  177000  000006  	mov	#-512.,6(r1)		; MP set word count
      52 004754 012711  000114          	mov	#100+14,(r1)		; CSR read data cmd with Interrupt Enable
      53                                
      54 004760 005237  004636          	inc	rlecnt			; register as event
      55 004764 000207                  	return
      56                                
      56                                
     223                                .endc
     224 000000                         .if ne ryenab
     225                                	.include ma_ry.mac
     226                                .endc
     227 000000                         .if ne duenab
     228                                	.include ma_du.mac
     229                                .endc
     230                                	.include ma_strings.mac
       1                                
       2                                	.title ma_strings - String constants
       3                                shello:
       4 004766    015     012          	.byte	15,12		; space, CR, LF,
       5 004770    052     052     052  	.ascii	/*** Multi Device Interrupt&DMA test ***/
         004773    040     115     165  
         004776    154     164     151  
         005001    040     104     145  
         005004    166     151     143  
         005007    145     040     111  
         005012    156     164     145  
         005015    162     162     165  
         005020    160     164     046  
         005023    104     115     101  
         005026    040     164     145  
         005031    163     164     040  
         005034    052     052     052  
       6 005037    015     012          	.byte	15,12		; CR, LF
       7 005041    136     103     040  	.ascii	/^C to stop./
         005044    164     157     040  
         005047    163     164     157  
         005052    160     056          
       8 005054    015     012          	.byte	15,12		; CR, LF
       9 005056    000                  	.byte	0
      10                                
      11                                
      12                                sbye:
      13 005057    015     012          	.byte	15,12
      14 005061    107     157     157  	.ascii	/Good Bye!/
         005064    144     040     102  
         005067    171     145     041  
      15 005072    015     012          	.byte	15,12 	; CR, LF
      16 005074    000                  	.byte	0
      17                                
      17                                
     231                                
     232                                	.end
     233                                
     234                                
     235                                
     235                                
